# 江一的技术博客自动部署工作流
# 功能：自动构建Next.js项目并部署到GitHub Pages
# 触发条件：推送到main分支、PR合并、手动触发
# 作者：江一 (JY764234162)
name: 自动部署Next.js到GitHub Pages

on:
  # 当推送到main分支时触发部署
  push:
    branches: ["main"]
    paths-ignore: ["**/*.md", "docs/**"]  # 忽略markdown和文档文件的变更

  # 允许从GitHub Actions页面手动触发工作流
  workflow_dispatch:
    inputs:
      environment:
        description: "部署环境"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

# 设置GITHUB_TOKEN权限，允许部署到GitHub Pages
permissions:
  contents: read      # 读取仓库内容
  pages: write        # 部署到GitHub Pages
  id-token: write     # 身份验证

# 并发控制：确保同一时间只有一个部署在运行
# 跳过排队中的运行，但不取消正在进行的部署
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 构建作业：负责构建Next.js项目
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]  # 支持多个Node.js版本
    
    steps:
      # 1. 检出代码
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整git历史，用于版本信息

      # 2. 检测包管理器（npm/yarn/pnpm）
      - name: 检测包管理器
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/pnpm-lock.yaml" ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
            echo "command=install --frozen-lockfile" >> $GITHUB_OUTPUT
            echo "runner=pnpm" >> $GITHUB_OUTPUT
            echo "lockfile=pnpm-lock.yaml" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package-lock.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "❌ 无法确定包管理器"
            exit 1
          fi
      # 3. 设置Node.js环境
      - name: 设置Node.js环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      # 4. 安装pnpm（如使用）
      - name: 安装pnpm
        if: steps.detect-package-manager.outputs.manager == 'pnpm'
        uses: pnpm/action-setup@v2
        with:
          version: 8

      # 5. 配置GitHub Pages
      - name: 配置GitHub Pages
        uses: actions/configure-pages@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # 6. 缓存依赖和构建缓存
      - name: 缓存依赖和构建缓存
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.yarn/cache
            ~/.pnpm-store
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ matrix.node-version }}-${{ hashFiles(format('**/{0}', steps.detect-package-manager.outputs.lockfile)) }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ matrix.node-version }}-

      # 7. 安装项目依赖
      - name: 安装项目依赖
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      # 8. 运行类型检查
      - name: 运行类型检查
        run: ${{ steps.detect-package-manager.outputs.runner }} tsc --noEmit

      # 9. 运行代码质量检查
      - name: 运行代码质量检查
        run: ${{ steps.detect-package-manager.outputs.runner }} next lint

      # 10. 构建Next.js项目
      - name: 构建Next.js项目
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_BASE_PATH: /JY764234162

      # 11. 验证构建结果
      - name: 验证构建结果
        run: |
          if [ ! -d "./out" ]; then
            echo "❌ 构建失败：未找到输出目录"
            exit 1
          fi
          echo "✅ 构建成功，输出文件数量: $(find ./out -type f | wc -l)"

      # 12. 上传构建产物
      - name: 上传构建产物
        uses: actions/upload-pages-artifact@v3
        with:
          name: github-pages
          path: ./out
          retention-days: 7

  # 部署作业：将构建产物部署到GitHub Pages
  deploy:
    # 仅在main分支且构建成功时部署
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.pull_request.merged == true)
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      # 1. 部署到GitHub Pages
      - name: 部署到GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2. 部署成功通知
      - name: 部署成功通知
        if: success()
        run: |
          echo "🎉 江一的技术博客部署成功！"
          echo "📍 访问地址: ${{ steps.deployment.outputs.page_url }}"
          echo "🕐 部署时间: $(date '+%Y-%m-%d %H:%M:%S')"

      # 3. 部署失败通知
      - name: 部署失败通知
        if: failure()
        run: |
          echo "❌ 江一的技术博客部署失败！"
          echo "🔍 请检查构建日志获取详细信息"

  # 工作流总结：提供完整的CI/CD状态报告
  summary:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()  # 无论成功失败都运行
    steps:
      - name: 构建状态总结
        run: |
          echo "=== 江一的技术博客 CI/CD 状态 ==="
          echo "触发事件: ${{ github.event_name }}"
          echo "提交信息: ${{ github.event.head_commit.message }}"
          echo "提交作者: ${{ github.event.head_commit.author.name }}"
          echo "提交时间: ${{ github.event.head_commit.timestamp }}"
          echo "构建状态: ${{ needs.build.result }}"
          echo "部署状态: ${{ needs.deploy.result }}"
          echo "工作流运行: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
